Version naming convention :

A version consists of an alternating series of,
    release numbers and,
    pre-release or post-release tags.

A release number is a series of digits punctuated by dots,
  such as 2.4 or 0.5.
Each series of digits is treated numerically, so
releases 2.1 and 2.1.0 are different ways to spell the same release number,
denoting the first subrelease of release 2. But 2.10 is the tenth subrelease
of release 2, and so is a different and newer release from 2.1 or 2.1.0.
Leading zeros within a series of digits are also ignored, so 2.01 is the same
as 2.1, and different from 2.0.1.

Following a release number, you can have either a pre-release or
post-release tag.

    Pre-release tags make a version be considered older than the version they
    are appended to. So, revision 2.4 is newer than revision 2.4c1, which in
    turn is newer than 2.4b1 or 2.4a1.

    Postrelease tags make a version be considered newer than the version they
    are appended to. So, revisions like 2.4-1 and 2.4pl3 are newer than 2.4, but
    are older than 2.4.1 (which has a higher release number).

    A pre-release tag is a series of letters that are alphabetically before
    "final". Some examples of prerelease tags would include alpha,
    beta, a, c, dev, and so on. You do not have to place a dot before the
    prerelease tag if it's immediately after a number, but it's okay to
    do so if you prefer. Thus, 2.4c1 and 2.4.c1 both represent release
    candidate 1 of version 2.4, and are treated as identical by setuptools.
    In addition, there are three special prerelease tags that are treated
    as if they were the letter c: pre, preview, and rc. So, version
    2.4rc1, 2.4pre1 and 2.4preview1 are all the exact same version as
    2.4c1, and are treated as identical by setuptools.

    A post-release tag is either a series of letters that are alphabetically
    greater than or equal to "final", or a dash (-).
    Post-release tags are generally used to separate patch numbers, port
    numbers, build numbers, revision numbers, or date stamps from the
    release number. For example, the version 2.4-r1263 might denote
    Subversion revision 1263 of a post-release patch of version 2.4. Or
    you might use 2.4-20051127 to denote a date-stamped post-release.

    Notice that after each pre or post-release tag, you are free to place
    another release number, followed again by more pre- or post-release tags.
    For example, 0.6a9.dev-r41475 could denote Subversion revision 41475 of the
    in-development version of the ninth alpha of release 0.6. Notice that dev
    is a pre-release tag, so this version is a lower version number than 0.6a9,
    which would be the actual ninth alpha of release 0.6. But the -r41475 is a
    post-release tag, so this version is newer than 0.6a9.dev.

For the most part, setuptools' interpretation of version numbers is
intuitive, but here are a few tips that will keep you out of trouble
in the corner cases:

    * Don't use - or any other character than . as a separator, unless you
      really want a post-release. Remember that 2.1-rc2 means you've already
      released 2.1, whereas 2.1rc2 and 2.1.c2 are candidates you're putting
      out before 2.1. If you accidentally distribute copies of a post-release
      that you meant to be a pre-release, the only safe fix is to bump your
      main release number (e.g. to 2.1.1) and re-release the project.
    * Don't stick adjoining pre-release tags together without a dot or number
      between them. Version 1.9adev is the adev prerelease of 1.9, not a
      development pre-release of 1.9a. Use .dev instead, as in 1.9a.dev, or
      separate the prerelease tags with a number, as in 1.9a0dev. 1.9a.dev,
      1.9a0dev, and even 1.9.a.dev are identical versions from setuptools'
      point of view, so you can use whatever scheme you prefer.
    * If you want to be certain that your chosen numbering scheme works the way
      you think it will, you can use the pkg_resources.parse_version() function
      to compare different version numbers

          >>> from pkg_resources import parse_version
          >>> parse_version('1.9.a.dev') == parse_version('1.9a0dev')
              True
          >>> parse_version('2.1-rc2') < parse_version('2.1')
              False
          >>> parse_version('0.6a9dev-r41475') < parse_version('0.6a9')
              True

